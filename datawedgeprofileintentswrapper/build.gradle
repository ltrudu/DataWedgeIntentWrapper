apply plugin: 'com.android.library'

ext {
    PUBLISH_GROUP_ID = 'com.zebra.datawedgeprofileintentswrapper'
    PUBLISH_ARTIFACT_ID = 'datawedgeprofileintentswrapper'
    PUBLISH_VERSION = '6.7.5'
}

android {
    compileSdkVersion 30

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 30
        versionCode 4
        versionName "1.3"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    //implementation 'androidx.appcompat:appcompat:1.2.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    //implementation group: 'com.google.code.gson', name: 'gson', version: '2.7'
}

def jarName = 'datawedgeprofileintents.jar'

task clearJarRelease(type: Delete) {
    delete "${project.buildDir}/outputs/jar/release/" + jarName
}

task clearJarDebug(type: Delete) {
    delete "${project.buildDir}/outputs/jar/debug/" + jarName
}

task makeJarRelease(type: Copy) {
    from("${project.buildDir}/intermediates/intermediate-jars/release/")
    into("${project.buildDir}/outputs/jar/release")
    include('classes.jar')
    rename('classes.jar', jarName)
}

task makeJarDebug(type: Copy) {
    from("${project.buildDir}/intermediates/intermediate-jars/debug/")
    into("${project.buildDir}/outputs/jar/debug")
    include('classes.jar')
    rename('classes.jar', jarName)
}

task makeAllJar(type: Copy) {}

makeJarRelease.dependsOn(clearJarRelease, build)
makeJarDebug.dependsOn(clearJarDebug, build)

makeAllJar.dependsOn(makeJarDebug,makeJarRelease)

/*
Publish tasks
https://medium.com/@daniellevass/how-to-publish-your-android-studio-library-to-jcenter-5384172c4739
https://raw.githubusercontent.com/blundell/release-android-library/master/android-release-aar.gradle
 */

// ./gradlew clean build generateRelease
apply plugin: 'maven'

def groupId = project.PUBLISH_GROUP_ID
def artifactId = project.PUBLISH_ARTIFACT_ID
def version = project.PUBLISH_VERSION

def localReleaseDest = "${buildDir}/release/${version}"

task androidJavadocs(type: Javadoc) {
    failOnError = false
    source = android.sourceSets.main.java.srcDirs
    ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
    classpath += files(ext.androidJar)
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    archiveClassifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

uploadArchives {
    repositories.mavenDeployer {
        pom.groupId = groupId
        pom.artifactId = artifactId
        pom.version = version
        // Add other pom properties here if you want (developer details / licenses)
        repository(url: "file://${localReleaseDest}")
    }
}

task zipRelease(type: Zip) {
    from localReleaseDest
    destinationDir buildDir
    archiveBaseName = "release-${version}" //.zip"
}

task generateRelease {
    doLast {
        println "Release ${version} can be found at ${localReleaseDest}/"
        println "Release ${version} zipped can be found ${buildDir}/release-${version}.zip"
    }
}

generateRelease.dependsOn(uploadArchives)
generateRelease.dependsOn(zipRelease)


artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
}